Jiaan Tan                                                           9/12/17

1. 1.6

Given:

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
                     
If Alyssa attempts to use new-if to compute square roots, then the an
infinite loop will occur. To see why, recall that in Scheme, if is one of the
special forms and a special form is an expression that follows special
evaluation rules. Knowing that, let see what Scheme considers new-if to be.
Since new-if was created in the form:

(define (<name> <formal parameters>) <body>)

Scheme would consider new-if to be a procedure. Which means unlike the special
form if, new-if follows Scheme's applicative-order evaluation rules. And what
happens when the following gets called

(new-if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x)
                   x))

is that all the expressions in the list, (good-enough? guess x), guess and
(sqrt-iter (improve guess x) x) will get evaluated first before applying
new-if. Which means sqrt-iter is just going to keep calling itself. 

2. 1.12

To solve this exercise, the first thing I did was evaluating (p 4 2) by
hand. What I got was:

                                  (p 4 2)
                                 /       \                                
                (p 3 1)                             (p 3 2)
                /     \                             /     \
        (p 2 0)        (p 2 1)               (p 2 1)       (p 2 2)
           |            /   \                 /   \           |
           1      (p 1 0)   (p 1 1)     (p 1 0)   (p 1 1)     1
                     |         |           |         |  
                     1         1           1         1

The pattern I notice from this the tree I got is that whenever e is 0 or e
equals r, the value of element is 1. To translate that into Scheme:

(cond ((= e 0) 1)
      ((= e r) 1))

Then for the rest of the elements, their value is made up of the sum of values
that is directly above them. So to get the value of (4 2), add the values of
(3 1) and (3 2) together. But what is value of (3 1) or (3 2)? Looking at the
tree, all values come from adding 1s. Which means to get the value of (3 1), I
have to keep going down the tree until I get a 1, add all the 1s together and I
get the value of the parent and eventually the root: 

(+ (p (- r 1) (- e 1)) (p (- r 1) e))

And finally combining those two pieces together:


(define (p r e)
  (cond ((= e 0) 1)
        ((= e r) 1)
        (else (+ (p (- r 1) (- e 1)) (p (- r 1) e)))))

To test function p, I did

(p 0 0)
1
(p 2 1)
2
(p 4 2)
6

the results match the results in the given pascal triangle so I can confirm my
algorithm works.

3. 1.17

Given:

(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b 1)))))

I know that to achieve logarithmic number of steps, the number of additions
have need to be halved repeatedly. Knowing that, I tried solving several
multiplications by hand to find some patterns that could be repeated. I found
out that when adding together an even number of a same integer, half of the
integers can be eliminated. Take the products of 3 and 4 for example. With
the given * function, I have to do the following:

3 + 3 + 3 + 3  = 12

But I notice that I can divide that in half and safely eliminate one of the
halves as long as I account for the eliminated integers in the left over half:

  x       y
3 + 3 | 3 + 3          ;number of 3s = 4

Side y gets eliminated, and side x now have to account for the sum of side
y. Since side x = side y, I can just double side x to account for the lost of
side y:

     x             x      
2(3) + 2(3) -> 2(3 + 3)         ;number of 3s = 2

Since side x is still adding an even number of integers, I can divide again:

  i   j  
2(3 | 3)

    i
2(2(3)) = 12             ;number of 3s = 1

What I got out of this is that I can recursively halve the number of 3s for
even numbers of addition. So in Scheme it's:

(fast-mult a (halve b))

In this case, a = 3 and b = number of addition of 3s. To account for the lost
of 3s during each halve call, notice that 2 is wrapped around the left over
half every time and what 2 does is to double so:

(double (fast-mult a (halve b)))

When adding together an odd number of integers, I keep in mind the fact that
odd - 1 = even. And since I can't divide odd numbers nicely, I can't apply
the halve function to them. That means instead of eliminating half of integers,
I can only eliminate one integer when working with odd numbers:

(fast-mult a (- b 1))

To account for the lost, I simply add back one:

(+ a (fast-mult a (- b 1)))

And finally we have:

(define (fast-mult a b)
  (cond ((= b 0) 0)
        ((odd? b)
         (display b)
         (newline)
         (+ a (fast-mult a (- b 1))))
        (else
         (display b)
         (newline)
         (double (fast-mult a (halve b))))))

To test that my function is working and actually uses less steps than function
*, I first have to create the functions double and halve. Then I renamed
function * to avoid conflict with the pre-defined function and changed if to
cond to allow me to put (display b) so I can keep track of how many steps it is
taking:

(define (mult a b)
  (cond ((= b 0)0)
      (else
       (display b)
       (newline)
       (+ a (mult a (- b 1))))))

One sample test result is:

> (fast-mult 8 9)
9
8
4
2
1
72
> (mult 8 9)
9
8
7
6
5
4
3
2
1
72

As we can see, the number of additions halves every time we hit an even number,
8->4, 4->2. This act of recursively eliminating half of the steps is more
apparent on bigger multiplications:

> (fast-mult 123 2132)
2132
1066
533
532
266
133
132
66
33
32
16
8
4
2
1
262236

I am not even going to bother giving the mult equivalent of the result because
there's 2132 lines of logging. And so I can conclude my function works and
it is in log time.

4. 1.20

Given:

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (r a b))))

The process generated in normal-order of evaluation of (gcd 206 40) is:

(gcd 206 40)
(if (= 40 0)
    206
    (gcd 40 (r 206 40)))            

(gcd 40 (r 206 40))            
(if (= (r 206 40) 0)             ;r + 1 = 1
       40  
       (gcd (r 206 40) (r 40 (r 206 40))))    

(gcd (r 206 40) (r 40 (r 206 40)))           
(if (= (r 40 (r 206 40)) 0)             ;r + 2 = 3
       (r 206 40)  
       (gcd (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))

(gcd (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))
(if (= (r (r 206 40) (r 40 (r 206 40))) 0)             ;r + 4 = 7
       (r 40 (r 206 40))   
       (gcd (r (r 206 40) (r 40 (r 206 40)))
            (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))))

(gcd (r (r 206 40) (r 40 (r 206 40)))
     (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40)))))
(if (= (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40)))) 0)
                                                        ;r + 7 = 14, b = 0
       (r (r 206 40) (r 40 (r 206 40))                  ;r + 4 = 18, a = 2     
       (gcd (r (r 206 40) (r 40 (r 206 40)))
            (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))))

Normal-order evaluation uses a total of 18 remainder operations. We can
see that remainder operations must be performed every time they are the test
expression of function if since if is a special form. And since the number of
remainder operations is dependent on b and the remainder operations in b is
never performed, it's keeps building up.

The process generated in applicative-order evaluation is:

(gcd 206 40)
(gcd 40 (r 206 40) = 6) ;r + 1 = 1
(gcd 6 (r 40 6) = 4)    ;r + 1 = 2
(gcd 4 (r 6 4) = 2)     ;r + 1 = 3
(gcd 2 (r 4 2) = 0)     ;r + 1 = 4

The number of remainder operations performed in applicative-order evaluation is
4. What happened was that remainder operation in applicative-order evaluation is
performed before gcd is applied, so gcd only need to perform remainder operation
once.


